name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            output_name: book_manager
            asset_name: book-manager-linux
          - os: windows-latest
            output_name: book_manager.exe
            asset_name: book-manager-windows
          - os: macos-latest
            output_name: book_manager
            asset_name: book-manager-macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1.6.0
        with:
          sdk: stable

      - name: Install dependencies
        run: |
          # Ensure we're in the right directory
          ls -la
          dart pub get
        shell: bash

      - name: Compile executable
        run: dart compile exe book_management.dart -o ${{ matrix.output_name }}

      - name: Create README for distribution
        run: |
          echo "# Book Management System" > DIST_README.md
          echo "" >> DIST_README.md
          echo "## Usage" >> DIST_README.md
          echo "Simply run the executable to start the application:" >> DIST_README.md
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo "- Double-click book_manager.exe or run it from command prompt" >> DIST_README.md
          else
            echo "- Run ./book_manager from terminal (you may need to chmod +x book_manager first)" >> DIST_README.md
          fi
        shell: bash

      - name: Zip artifacts
        uses: vimtor/action-zip@v1.1
        with:
          files: ${{ matrix.output_name }} DIST_README.md
          dest: ${{ matrix.asset_name }}.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}.zip
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    # Run on tags or manual workflow dispatch with a parameter
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Display structure of downloaded artifacts
        run: ls -R artifacts
        shell: bash
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name || format('Manual-{0}', github.run_number) }}
          draft: false
          prerelease: false
          files: |
            artifacts/book-manager-linux/*.zip
            artifacts/book-manager-windows/*.zip
            artifacts/book-manager-macos/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}